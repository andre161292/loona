//! Macros to help generate code for all suites/groups/tests of the httpwg crate

// This file is automatically @generated by httpwg-gen
// It is not intended for manual editing

/// This generates a module tree with some #[test] functions.
/// The `$body` argument is pasted inside those unit test, and
/// in that scope, `test` is the `httpwg` function you can use
/// to run the test (that takes a `mut conn: Conn<IO>`)
#[macro_export]
macro_rules! tests {
    ($body: tt) => {
        #[cfg(test)]
        mod rfc9113 {
            use httpwg::rfc9113 as __suite;

            mod _3_starting_http2 {
                use httpwg::rfc9113 as __suite;

                /// The server connection preface consists of a potentially empty
                /// SETTINGS frame (Section 6.5) that MUST be the first frame
                /// the server sends in the HTTP/2 connection.
                #[test]
                fn sends_client_connection_preface() {
                    use __suite::sends_client_connection_preface as test;
                    $body
                }

                /// Clients and servers MUST treat an invalid connection preface as
                /// a connection error (Section 5.4.1) of type PROTOCOL_ERROR.
                #[test]
                fn sends_invalid_connection_preface() {
                    use __suite::sends_invalid_connection_preface as test;
                    $body
                }
            }

            mod _4_2_frame_size {
                use httpwg::rfc9113 as __suite;

                /// An endpoint MUST send an error code of FRAME_SIZE_ERROR if a frame
                /// exceeds the size defined in SETTINGS_MAX_FRAME_SIZE, exceeds any
                /// limit defined for the frame type, or is too small to contain mandatory frame data
                #[test]
                fn frame_exceeding_max_size() {
                    use __suite::frame_exceeding_max_size as test;
                    $body
                }
            }
        }
    };
}
